#ASSEMBLY PIPELINE

configfile: "config.yaml"

rule all :
    input :        
        expand("subsampling_{coverage}X/fastqFile/{coverage}X_{replicat}.fastq", coverage=config["coverage"], replicat=[1,2]),
        expand ("subsampling_{coverage}X/quast/{coverage}X_{replicat}/", coverage=config["coverage"], replicat=config["replicat"]),
        "nb_contigs.png", 
        "mismatches.png"

rule subsampling :
        input : "sample_40X_1.bam"
        output : "subsampling_{coverage}X/bamFile/{coverage}X_{replicat}.bam"
        run :
            cov = {coverage}
            from sequana import pacbio
            b = pacbio.BAMPacbio(input[0])
            b.random_selection(output_filename = output[0], reference_length=config["subsampling"]["refSize"], expected_coverage=cov)

rule bam2fastq :
        input : "subsampling_{coverage}X/bamFile/{coverage}X_{replicat}.bam"
        output : "subsampling_{coverage}X/fastqFile/{coverage}X_{replicat}.fastq"
        shell :  """bioconvert {input} {output}"""

rule canu :
        input : "subsampling_{coverage}X/fastqFile/{coverage}X_{replicat}.fastq"
        output :  "subsampling_{coverage}X/canu/{coverage}X_{replicat}.contigs.fasta"
        params :
                prefix = "{coverage}X_{replicat}",
                #genSize = "4086189",
                #techno = "-pacbio-raw"
        shell : """canu -d {params.prefix} -p {params.prefix} genomeSize=config["canu"]["genSize"] config["canu"]["techno"] {output}"""

rule quast : 
        input : "subsampling_{coverage}X/canu/{coverage}X_{replicat}.contigs.fasta"
        output : "subsampling_{coverage}X/quast/{coverage}X_{replicat}/"
        shell : """python ../quast/quast-4.6.3/quast.py -o {output} -R config["quast"]["refFile"] {input}"""

import glob
def getContig(n):
    files =  (glob.glob(n))
    print (files)
    return files

def getCov(n):
    cov = n[12:13]
    return cov

def getQuastReport(n):
    files =  (glob.glob(n))
    print (files)
    return files


rule plot_contig :
    input : 
        A = getContig('subsampling_*/canu/*.contigs.fasta'),
        B = getQuastReport('subsampling_*/quast/*/report.txt') 
    output : 
        "nb_contigs.png",
        "mismatches.png"
    run :
        ncov = len(config["coverage"])
        tabcontigs = [[]] * ncov
        for file in input.A : 
            cov = getCov(file)
            from sequana import FastA
            ff = FastA(file)
            ncontig = len(ff)
            ind = config["coverage"].index(cov)
            tabcontigs[ind].append(ncontig)
	    print (tabcontigs)
        with open("contigs.txt", "w") as fh:
            fh.write(str(tabcontigs))
        from pylab import boxplot, savefig, clf
        boxplot(tabcontigs)
        savefig('nb_contigs.png')
        mis = [[]] * ncov
        for fileReport in input.B : 
            cov = getCov(fileReport)
            with open(fileReport, "r") as f :
                for line in f :
                    mismatches = re.search(r'mismatches\sper\s100\skbp(.*)', line, re.M|re.I)
                    if mismatches is not None : 
                        ind = config["coverage"].index(cov)
                        mis[ind].append(float(mismatches.group(1)))
                        print("MISMATCHES {0}".format(mis))
        clf()
        boxplot(mis)
        savefig('mismatches.png')